from aiogram.types import CallbackQuery, InlineKeyboardMarkup

from db import Order, DeliveryType
from utils.formatting import format_price_text


async def create_order_details_message(
    call: CallbackQuery, order: Order | None, kb: InlineKeyboardMarkup | None = None
):
    if not order:
        await call.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    if order.delivery_type == DeliveryType.PICKUP and order.pickup_point:
        delivery_info = (
            f"–ü—É–Ω–∫—Ç —Å–∞–º–æ–≤—ã–≤–æ–∑–∞: {order.pickup_point.name}, {order.pickup_point.address}"
        )
    else:
        delivery_info = f"–ê–¥—Ä–µ—Å: {order.address or '‚Äî'}"

    text_lines = [
        f"üßæ –ó–∞–∫–∞–∑ {order.order_uuid}",
        f"–°—Ç–∞—Ç—É—Å: {order.status}",
        f"–ò–º—è: {order.name}",
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {order.phone}",
        f"{delivery_info}",
        f"–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_type}",
        f"–°–æ–∑–¥–∞–Ω: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n",
    ]

    items = order.items
    total = 0
    for item in items:
        price = item.product_price
        line_total = price * item.quantity
        total += line_total
        text_lines.append(
            f"{item.product_name} ‚Äî {item.quantity} √ó {format_price_text(price)} = {format_price_text(line_total)}"
        )

    text_lines.append(f"\n–ò—Ç–æ–≥–æ: {format_price_text(total)}")

    await call.message.edit_text("\n".join(text_lines), reply_markup=kb)
